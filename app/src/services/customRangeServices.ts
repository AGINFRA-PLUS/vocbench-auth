import {Injectable} from '@angular/core';
import {HttpManager} from "../utils/HttpManager";
import {Deserializer} from "../utils/Deserializer";
import {ARTResource, ARTURIResource, ARTNode} from "../utils/ARTResources";
import {FormEntry, CustomRangeType, FormEntryType} from "../utils/CustomRanges";

@Injectable()
export class CustomRangeServices {

    private serviceName = "CustomRanges";
    private oldTypeService = false;

    constructor(private httpMgr: HttpManager) { }

    /**
     * Returns the description of a reified resource, object of a predicate with custom range
     * @param predicate predicate of which the resource represents the object
     * @param resource object of a predicate with a custom range.
     * @return 
     */
    getReifiedResourceDescription(predicate: ARTURIResource, resource: ARTNode) {
        console.log("[CustomRangeServices] getReifiedResourceDescription");
        var params: any = {
            predicate: predicate.getURI(),
            resource: resource.getNominalValue()
        };
        return this.httpMgr.doGet(this.serviceName, "getReifiedResourceDescription", params, this.oldTypeService);
    }
    
    /**
     * Removes the reified resource generated by means of a custom range
     * @param predicate predicate of wich the resource represents the object
     * @param resource object of a predicate with a custom range
     * @return 
     */
    removeReifiedResource(subject: ARTResource, predicate: ARTURIResource, resource: ARTNode) {
        console.log("[CustomRangeServices] removeReifiedResource");
        var params: any = {
            subject: subject.getNominalValue(),
            predicate: predicate.getURI(),
            resource: resource.getNominalValue()
        };
        return this.httpMgr.doGet(this.serviceName, "removeReifiedResource", params, this.oldTypeService);
    }
    
    /**
     * Returns the form for the given CustomRangeEntry
     * @param creId id of a CustomRangeEntry
     * @return an array of FormEntry
     */
    getCustomRangeEntryForm(creId: string) {
        console.log("[CustomRangeServices] getCustomRangeEntryForm");
        var params: any = {
            id: creId
        };
        return this.httpMgr.doGet(this.serviceName, "getCustomRangeEntryForm", params, this.oldTypeService).map(
            stResp => {
                /* this service could throw an error if Pearl is invalid
                (in this case the server throws a PRParserException and it is handled in HttpManager),
                or if the form doesn't contain any formEntry (in this case <form> element doesn't contain
                <formEntry> elements but has an "exception" attribute) */
                var form: Array<FormEntry> = [];
                var formEntryElemColl: Array<Element> = stResp.getElementsByTagName("formEntry");
                
                if (formEntryElemColl.length == 0) {
                    var exception = stResp.getElementsByTagName("form")[0].getAttribute("exception");
                    throw new Error("Error in pearl code of the Custom Range Entry with id '" + creId + "': " + exception);
                }
                
                var pendingEntryDependencies = <any>[];
                //an array of objects {phIdEntry: string, userPromptArg: string} that collects the userPrompt
                //of the formEntries that are used just as argument/dependency of another formEntry and later
                //will be set as arguments to other formEntries
                
                for (var i = 0; i < formEntryElemColl.length; i++) {
                    var placeholderId = formEntryElemColl[i].getAttribute("placeholderId");
                    var type: FormEntryType = formEntryElemColl[i].getAttribute("type") == "literal" ? "literal" : "uri";
                    var mandatory = formEntryElemColl[i].getAttribute("mandatory") == "true";
                    var userPrompt = formEntryElemColl[i].getAttribute("userPrompt");
                    var converter = formEntryElemColl[i].getElementsByTagName("converter")[0].getAttribute("uri");
                    //coda:langString could have an argument to specify the language through another entry 
                    if (converter == "http://art.uniroma2.it/coda/contracts/langString") {
                        var argUserPrompt = formEntryElemColl[i].getElementsByTagName("converter")[0]
                                .getElementsByTagName("arg")[0].getAttribute("userPrompt");
                        pendingEntryDependencies.push({phIdEntry: placeholderId, userPromptArg: argUserPrompt});
                    }
                    var entry = new FormEntry(placeholderId, type, mandatory, userPrompt, converter);
                    if (type == "literal") {
                        var datatype = formEntryElemColl[i].getAttribute("datatype");
                        if (datatype != undefined) {
                            entry.setDatatype(datatype);
                        }
                        var lang = formEntryElemColl[i].getAttribute("lang");
                        if (lang != undefined) {
                            entry.setLang(lang);
                        }
                    }
                    form.push(entry);
                }
                
                //iterate over pendingEntryDependencies and set them as argument of other formEntries
                for (var i = 0; i < pendingEntryDependencies.length; i++) {
                    var argEntry: FormEntry; //entry that is used as argument of another
                    //get the FormEntry to set as argument
                    for (var j = 0; j < form.length; j++) {
                        if (form[j].getUserPrompt() == pendingEntryDependencies[i].userPromptArg) {
                            argEntry = form[j];
                            argEntry.setDependency(true); //mark the entry as a dependency
                        }
                    }
                    //look for the entry to which inject the argEntry as argument
                    for (var j = 0; j < form.length; j++) {
                        if (pendingEntryDependencies[i].phIdEntry == form[j].getPlaceholderId()) {
                            form[j].setConverterArg(argEntry);
                        }
                    }
                }
               
                return form;
            }
        );
    }
    
    /**
     * Makes Coda execute the pearl rule in the given CustomRangeEntry and with the value specified in the entryMap.
     * Then "append" the generated triples (representing a reified object) to the subject-predicate pair. 
     * @param subject
     * @param predicate
     * @param crEntryId
     * @param entryMap array of object {userPrompt: string, value: string} where "userPrompt" is the feature
     * name in the pearl rule which its "value" is provided by means a custom form
     */
    runCoda(subject: ARTURIResource, predicate: ARTURIResource, crEntryId: string, entryMap: Array<any>) {
        console.log("[CustomRangeServices] runCoda");
        var params: any = {
            subject: subject.getURI(),
            predicate: predicate.getURI(),
            crEntryId: crEntryId,
        };
        for (var i = 0; i < entryMap.length; i++) {
            params[entryMap[i].userPrompt] = entryMap[i].value;
        }
        return this.httpMgr.doGet(this.serviceName, "runCoda", params, this.oldTypeService);
    }
    
}